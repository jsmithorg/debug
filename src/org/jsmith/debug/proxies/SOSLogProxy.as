package org.jsmith.debug.proxies{	import flash.events.*;	import flash.net.XMLSocket;		import org.jsmith.debug.*;	import org.jsmith.debug.events.DebugErrorEvent;		/**	 * 	Dispatched when the <code>SOSLogProxy</code> could not be created.	 * 	 * 	@see org.jsmith.debug.events.DebugErrorEvent	 */	[Event(name="createProxyError", type="org.jsmith.debug.events.DebugErrorEvent.CREATE_PROXY_ERROR")]	//event DebugEventError.CREATE_PROXY_ERROR		public class SOSLogProxy extends EventDispatcher implements IEventDispatcher, ILogProxy	{		private var _socket:XMLSocket;		private var _isConnected:Boolean;				public function SOSLogProxy()		{			_isConnected = false;						_socket = new XMLSocket();			_socket.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			_socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);			_socket.addEventListener(Event.CONNECT, onConnect);							try 			{				_socket.connect("localhost", 4444);			} 			catch (e:SecurityError)			{				var event:SecurityErrorEvent = new SecurityErrorEvent(SecurityErrorEvent.SECURITY_ERROR, false, false, e.message);				onSecurityError(event);							}//end try					}//end constructor				private function onConnect(e:Event):void		{			_isConnected = true;					}//end method				private function onIOError(e:IOErrorEvent):void		{			var event:DebugErrorEvent = new DebugErrorEvent(DebugErrorEvent.CREATE_PROXY_ERROR, false, false, "An error occurred trying to connect to the remote host: " + e.text);			dispatchEvent(event);					}//end method				private function onSecurityError(e:SecurityErrorEvent):void		{			var event:DebugErrorEvent = new DebugErrorEvent(DebugErrorEvent.CREATE_PROXY_ERROR, false, false, "The proxy does not have sufficient security permissions to connect to the host: " + e.text);			dispatchEvent(event);					}//end method				public function log(category:String, type:LogType, message:*):void		{			if((type == LogType.ERROR || type == LogType.FATAL) && message is Error)			{				_socket.send("!SOS<showFoldMessage key='" + type + "'>" 							 + "<title><![CDATA[" + message + "]]></title>"							 + "<message><![CDATA[" + (message as Error).getStackTrace() + "]]></message>"							 + "</showFoldMessage>\n");			}			else			{				_socket.send("!SOS<showMessage key='" + type + "'><![CDATA[" + message + "]]></showMessage>\n");							}//end if						}//end method			}//end class	}//end package